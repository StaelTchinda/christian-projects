{
  "fix": true,
  "customRules": [
    {
      "name": "table-links",
      "description": "Ensure all items in the first column of a table have links",
      "tags": ["tables", "links"],
      "function": function customRule(params, onError) {
        params.tokens.forEach(function forToken(token) {
          if (token.type === "table_open") {
            let inFirstColumn = true;
            params.tokens.forEach(function forTableToken(tableToken) {
              if (tableToken.type === "td_open" && inFirstColumn) {
                const nextToken = params.tokens[params.tokens.indexOf(tableToken) + 1];
                if (nextToken.type !== "inline" || !nextToken.children.some(child => child.type === "link_open")) {
                  onError({
                    lineNumber: tableToken.lineNumber,
                    detail: "First column item does not have a link"
                  });
                }
                inFirstColumn = false;
              } else if (tableToken.type === "tr_close") {
                inFirstColumn = true;
              }
            });
          }
        });
      }
    },
    {
      "name": "items-sorted-alphabetically",
      "description": "Ensure all rows in a table are sorted alphabetically based on the first cell",
      "tags": ["tables", "sorting"],
      "function": function customRule(params, onError) {
        params.tokens.forEach(function forToken(token) {
          if (token.type === "table_open") {
            let rows = [];
            let currentRow = [];
            params.tokens.forEach(function forTableToken(tableToken) {
              if (tableToken.type === "td_open") {
                const nextToken = params.tokens[params.tokens.indexOf(tableToken) + 1];
                if (nextToken.type === "inline") {
                  currentRow.push(nextToken.content);
                }
              } else if (tableToken.type === "tr_close") {
                rows.push(currentRow);
                currentRow = [];
              }
            });
            const sortedRows = rows.slice().sort((a, b) => a[0].localeCompare(b[0]));
            if (JSON.stringify(rows) !== JSON.stringify(sortedRows)) {
              onError({
                lineNumber: token.lineNumber,
                detail: "Table rows are not sorted alphabetically"
              });
            }
          }
        });
      }
    },
    {
      "name": "platform-mandatory",
      "description": "Ensure all items in the first column of a table contain specific platform words",
      "tags": ["tables", "platform"],
      "function": function customRule(params, onError) {
        const platformWords = ["data", "script", "API", "Web", "iOS", "Android", "Discord", "MacOS", "Linux"];
        params.tokens.forEach(function forToken(token) {
          if (token.type === "table_open") {
            let inFirstColumn = true;
            params.tokens.forEach(function forTableToken(tableToken) {
              if (tableToken.type === "td_open" && inFirstColumn) {
                const nextToken = params.tokens[params.tokens.indexOf(tableToken) + 1];
                if (nextToken.type === "inline" && !platformWords.some(word => nextToken.content.includes(word))) {
                  onError({
                    lineNumber: tableToken.lineNumber,
                    detail: "First column item does not contain a platform word"
                  });
                }
                inFirstColumn = false;
              } else if (tableToken.type === "tr_close") {
                inFirstColumn = true;
              }
            });
          }
        });
      }
    }
  ]
}
